---
description: JavaScript/TypeScript specific rules
globs: "**/*.{js,jsx,ts,tsx,mjs,cjs}"
alwaysApply: false
---

# TypeScript/JavaScript Rules

## Import Organization
- Use @ alias for imports within each package (e.g., @/components/button)
- Use workspace protocol for cross-package imports (e.g., @repo/ui)
- Let Biome handle import ordering automatically

## React Best Practices
- Use components from `shadcn/ui` instead of custom-styled UI elements. Always import from the local `@/components/ui` alias
- Prefer functional components with hooks
- Prefer arrow functions for component and callback definitions
- Keep components small and focused on a single responsibility
- Do not fetch data in `useEffect`. Use `react-query` instead for asynchronous data handling
- Do not inline raw SVGs. Use `lucide-react` for icons
- Use `framer-motion` for all UI animations and transitions

## TypeScript Guidelines
- Avoid `any` type - be explicit with types
- Use interface for object shapes, type for unions/intersections
- Leverage TypeScript's type inference where appropriate
- Don't use @ts-ignore - fix the type issues properly
- Prefer `ts-pattern` for exhaustive and type-safe pattern matching

## Code Style
- Use async/await over promise chains
- Prefer const over let when variables won't be reassigned
- Use optional chaining (?.) and nullish coalescing (??)
- Keep functions pure when possible

## Error Handling
- Avoid bare try/catch. Use `neverthrow` for safer error handling
- Handle errors explicitly at appropriate boundaries
- Use proper error types instead of generic Error
- Log errors appropriately for debugging

## Performance
- Memoize expensive computations with useMemo
- Use useCallback for stable function references
- Lazy load components when appropriate with dynamic imports
